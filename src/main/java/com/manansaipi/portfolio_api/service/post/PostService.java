package com.manansaipi.portfolio_api.service.post;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.manansaipi.portfolio_api.dtos.post.PostCommentDTO;
import com.manansaipi.portfolio_api.dtos.post.PostCommentLikeRequestDTO;
import com.manansaipi.portfolio_api.dtos.post.PostCommentRequestDTO;
import com.manansaipi.portfolio_api.dtos.post.PostDTO;
import com.manansaipi.portfolio_api.dtos.post.PostDetailDTO;
import com.manansaipi.portfolio_api.models.post.Post;
import com.manansaipi.portfolio_api.models.post.PostComment;
import com.manansaipi.portfolio_api.repository.post.PostCommentRepository;
import com.manansaipi.portfolio_api.repository.post.PostRepository;

@Service
public class PostService {

    @Autowired
    private PostRepository postRepository;

    @Autowired
    private PostCommentRepository postCommentRepository;

    // Get all posts
    public List<PostDTO> getAll() {
        return postRepository.findAll()
                .stream()
                .map(this::mapToPostDTO)
                .collect(Collectors.toList());
    }
    private PostDTO mapToPostDTO(Post post) {
        PostDTO dto = new PostDTO();
        dto.setId(post.getId());
        dto.setPostTitle(post.getPostTitle());
        dto.setPostImage(post.getPostImage());
        dto.setCreatedAt(post.getCreatedAt());
        dto.setAuthor(post.getAuthor());
        dto.setAuthorImgUrl(post.getAuthorImgUrl());
        dto.setContent(post.getContent());

        return dto;
    }

    // Get one post with comments
    public Optional<PostDetailDTO> getById(Long id) {
        return postRepository.findById(id)
                .map(this::mapToPostDetailDTO);
    }
    private PostDetailDTO mapToPostDetailDTO(Post post) {
        PostDetailDTO dto = new PostDetailDTO();
        dto.setId(post.getId());
        dto.setPostTitle(post.getPostTitle());
        dto.setPostImage(post.getPostImage());
        dto.setCreatedAt(post.getCreatedAt());
        dto.setAuthor(post.getAuthor());
        dto.setAuthorImgUrl(post.getAuthorImgUrl());
        dto.setContent(post.getContent());

        List<PostCommentDTO> commentDTOs = post.getComments()
                .stream()
                .map(comment -> {
                    PostCommentDTO commentDTO = new PostCommentDTO();
                    commentDTO.setId(comment.getId());
                    commentDTO.setPostId(post.getId());
                    commentDTO.setComment(comment.getComment());
                    return commentDTO;
                })
                .collect(Collectors.toList());

        dto.setComments(commentDTOs);
        return dto;
    }

    // Add comment to post
    public PostCommentDTO saveComment(PostCommentRequestDTO request) {
    
        // 1. Try to find the post by the ID sent in the request
        Optional<Post> post = postRepository.findById(request.getPostId());

        // 2. If the post is not found, throw an exception (can replace this with custom error handling later)
        if (post.isEmpty()) {
            throw new RuntimeException("Post not found with id: " + request.getPostId());
        }
        
        // 3. Create a new PostComment entity instance
        PostComment comment = new PostComment();
        comment.setPostId(post.get());// 4. Set the `postId` (which is actually the Post object itself because it's a @ManyToOne relation)
        comment.setComment(request.getComment());// 5. Set the comment text from the request
        comment.setName(request.getName());
        comment.setTotalLikes(0);
        comment.setCreatedAt(LocalDateTime.now());

        // 6. Save the comment to the database using the repository
        PostComment saved = postCommentRepository.save(comment);

        // 7. Map the saved entity into a DTO to send back as a response
        PostCommentDTO dto = new PostCommentDTO();
        dto.setId(saved.getId());                  // the ID generated by the database
        dto.setPostId(post.get().getId());         // the post ID this comment belongs to
        dto.setComment(saved.getComment());        // the content of the comment

        // 8. Return the DTO
        return dto;
    }

    // Get comments based on posts id
    public List<PostCommentDTO> getCommentsByPostId(Long postId){
        return postCommentRepository.findByPostId_IdOrderByCreatedAtDesc(postId)
                .stream()
                .map(comment -> {
                    PostCommentDTO dto = new PostCommentDTO();
                    dto.setId(comment.getId());
                    dto.setPostId(comment.getPostId().getId());
                    dto.setComment(comment.getComment());
                    dto.setName(comment.getName());
                    dto.setTotalLikes(comment.getTotalLikes());
                    dto.setCreatedAt(comment.getCreatedAt());
                    dto.setIsVerified(comment.getIsVerified());
                    return dto;
                })
                .collect(Collectors.toList());
    }

    public List<PostCommentDTO> getAllComments(){
        return postCommentRepository.findAll()
                .stream()
                .map(comment -> {
                    PostCommentDTO dto = new PostCommentDTO();
                    dto.setId(comment.getId());
                    dto.setPostId(comment.getPostId().getId());
                    dto.setComment(comment.getComment());
                    return dto;
                })
                .collect(Collectors.toList());
    }

    // Like Comment
    public PostCommentDTO likeComment(PostCommentLikeRequestDTO request) {
    // 1. Find the comment by its ID
    Optional<PostComment> commentOptional = postCommentRepository.findById(request.getCommentId());

    if (commentOptional.isEmpty()) {
        throw new RuntimeException("Comment not found with id: " + request.getCommentId());
    }

    // 2. Get the comment
    PostComment comment = commentOptional.get();

    // 3. Increment the like count
    int currentLikes = comment.getTotalLikes() != null ? comment.getTotalLikes() : 0;
    if (request.getIsLiking()) {
        comment.setTotalLikes(currentLikes + 1);
    } else {
        comment.setTotalLikes(Math.max(0, currentLikes - 1)); // prevent going below 0
    }

    // 4. Save the updated comment
    PostComment updated = postCommentRepository.save(comment);

    // 5. Map to DTO
    PostCommentDTO dto = new PostCommentDTO();
    dto.setId(updated.getId());
    dto.setTotalLikes(updated.getTotalLikes());
    dto.setCreatedAt(updated.getCreatedAt());

    return dto;
}


}

